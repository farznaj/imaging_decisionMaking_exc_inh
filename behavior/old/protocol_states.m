sma = add_state(sma, 'name', 'go_to_center', ...
    'input_to_statechange', { 'Cin', 'wait_in_center'});%It is risky not to have a self_timer on a state (Danger is my middle name)


sma = add_state(sma, 'name', 'wait_in_center', ...
    'self_timer', 0.001, ...
    'output_actions', {'DOut', pulse1; ...
                       'SoundOut', SoundManagerSection(obj, 'get_sound_id', 'WaitStart'); ...
                       'SchedWaveTrig', 'wave_prestim_delay'}, ...
    'input_to_statechange', { 'Tup', 'delay_to_stim'; 'Cout', 'npunish'});


sma = add_state(sma, 'name', 'delay_to_stim', ...
    'input_to_statechange', {'wave_prestim_delay_In', 'tone_playing'; ... 
                             'Cout', 'npunish'});


sma = add_state(sma, 'name', 'tone_playing', ...
    'output_actions', {'SoundOut', SoundManagerSection(obj, 'get_sound_id', target_sound); ...
                       'SchedWaveTrig', 'wave_wait_duration + wave_ContStimDuration'}, ...
    'input_to_statechange', {'wave_wait_duration_In', 'post_stim_delay'; ...
                             'Cout', 'pre_npunish'});


%%                             
sma = add_state(sma, 'name', 'post_stim_delay', ...
    'output_actions', {'SchedWaveTrig', 'wave_poststim_delay'}, ...
    'input_to_statechange', {'wave_poststim_delay_In', 'allowed_to_withdraw';'Cout', 'pre_npunish';'wave_ContStimDuration_In', 'post_stim_delay2'});


sma = add_state(sma, 'name', 'allowed_to_withdraw', ...
    'self_timer', 0.001 , ... % give 1s for rat to withdraw
    'output_actions', {'SoundOut', SoundManagerSection(obj, 'get_sound_id', 'WaitEnd')}, ...
    'input_to_statechange', {'Tup', random_state; 'Cout', random_state;'wave_ContStimDuration_In', 'allowed_to_withdraw2'});


%%      
sma = add_state(sma, 'name', 'post_stim_delay2', ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound)}, ...
    'input_to_statechange', {'wave_poststim_delay_In', 'allowed_to_withdraw';'Cout', 'pre_npunish'});


sma = add_state(sma, 'name', 'allowed_to_withdraw2', ...
    'self_timer', 0.001 , ... % give 1s for rat to withdraw
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound)}, ...
    'input_to_statechange', {'Tup', random_state; 'Cout', random_state});


%%    
sma = add_state(sma, 'name', 'pre_npunish', ...
    'self_timer',  0.001, ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound) }, ...
    'input_to_statechange', { 'Tup', 'npunish'; });


sma = add_state(sma, 'name', 'npunish', ...
'self_timer', value(PunishNoiseDuration), ...
'output_actions', {'DOut', lled + rled; ...
                   'SoundOut', SoundManagerSection(obj, 'get_sound_id', pnoise_name);...
                   'SchedWaveTrig', '-wave_prestim_delay -wave_poststim_delay -wave_wait_duration -wave_ContStimDuration'}, ...
'input_to_statechange', { 'Tup', 'check_next_trial_ready'; }); %AMB chose not to add a prolonged burst of light from the LED panel to reduce the risk of it being confused with the visual stimulus and not to add the center port light to prevent changing the visual state of the animal too drastically


%%   
% not used for now, but needs to be here
sma = add_state(sma, 'name', 'flash_detected', ...
    'self_timer', value(WaitDuration) - 0.001, ... % assuming there is a delay of 1ms on the visual stim
    'input_to_statechange', { 'Tup', 'allowed_to_withdraw'; 'Cout', 'pre_npunish'});


%%    
sma = add_state(sma, 'name', 'left_on', ...
    'output_actions', {'SchedWaveTrig', 'wave_TimeToChoose'}, ...
    'input_to_statechange', {'Lin', 'stop_and_reward'; 'wave_TimeToChoose_In', 'did_not_choose';  'Rin', 'stop_and_punish';'wave_ContStimDuration_In', 'left_on2'});


sma = add_state(sma, 'name', 'left_on2', ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound) }, ...
    'input_to_statechange', {'Lin', 'reward'; 'wave_TimeToChoose_In', 'did_not_choose';  'Rin', 'punish'});


sma = add_state(sma, 'name', 'right_on', ...
    'output_actions', {'SchedWaveTrig', 'wave_TimeToChoose'}, ...
    'input_to_statechange', {'Rin', 'stop_and_reward'; 'wave_TimeToChoose_In', 'did_not_choose';  'Lin', 'stop_and_punish';'wave_ContStimDuration_In', 'right_on2'});


sma = add_state(sma, 'name', 'right_on2', ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound) }, ...
    'input_to_statechange', {'Rin', 'reward'; 'wave_TimeToChoose_In', 'did_not_choose';  'Lin', 'punish'});


%%
sma = add_state(sma, 'name', 'stop_and_reward', ...
    'self_timer', 0.001, ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound)}, ...
    'input_to_statechange', { 'Tup', 'reward' });


sma = add_state(sma, 'name', 'stop_and_punish', ...
    'self_timer', 0.001, ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound)}, ...
    'input_to_statechange', { 'Tup', 'punish' });


sma = add_state(sma, 'name', 'reward', ...
    'self_timer', water_duration, ...
    'output_actions', { 'DOut', water_delivery; ...
                        'SoundOut', SoundManagerSection(obj, 'get_sound_id', 'correctChoiceSound'); ...
                        'SchedWaveTrig', '-wave_prestim_delay -wave_poststim_delay -wave_TimeToChoose -wave_wait_duration -wave_ContStimDuration'}, ...
    'input_to_statechange', { 'Tup', 'check_next_trial_ready'; });


sma = add_state(sma, 'name', 'punish', ...
    'self_timer', value(IncorrectToneDuration), ...
    'output_actions', {'DOut', cled; ...
                       'SoundOut', SoundManagerSection(obj, 'get_sound_id', 'IncorrectChoiceSound'); ...
                       'SchedWaveTrig', '-wave_prestim_delay -wave_poststim_delay -wave_TimeToChoose -wave_wait_duration -wave_ContStimDuration'}, ...
    'input_to_statechange', { 'Tup', 'check_next_trial_ready'; });%center port light is a new feature of this code


sma = add_state(sma, 'name', 'did_not_choose', ...
    'self_timer', value(PunishNoiseDuration), ...
    'output_actions', {'SoundOut', -SoundManagerSection(obj, 'get_sound_id', target_sound);...
                       'SchedWaveTrig', '-wave_prestim_delay -wave_poststim_delay -wave_TimeToChoose -wave_wait_duration -wave_ContStimDuration'}, ...
    'input_to_statechange', { 'Tup', 'check_next_trial_ready'; });%no port lights will be used during did_not_choose because I have no idea where the animal will be (must protect the visual state of the animal)


